#!/bin/bash
unrar x CM100Threshold.rar
unrar x data.rar
mkdir CMSEARCH
mkdir AlignmentBlastMature
mkdir PredictedHairpin
mkdir PredictedCurated
mkdir PredictedIdentical
mkdir PredictedNonIdentical
mkdir Redundant70
mkdir NonRedundant70
mkdir NonRedundant75
mkdir Redundant75
mkdir NonRedundant80
mkdir Redundant80
mkdir NonRedundant85
mkdir Redundant85
mkdir NonRedundant90
mkdir Redundant90
mkdir NonRedundant95
mkdir Redundant95
mkdir ID

#SEARCH
#cmsearch --cpu 10 -A CMSEARCH/MIR156 CM100Threshold/MIR156.cm genome.fa
#Loop to run cmsearch on all .cm files in the CM100Threshold directory
for file in CM100Threshold/*.cm; do
    base_name=$(basename "$file" .cm)    
    cmsearch --cpu 10 -A "CMSEARCH/${base_name}" "$file" genome.fa &
done

# Wait for all background processes to finish
wait

#FIND
find CMSEARCH -size  0 -print -delete

#EXTRACTALIGN
#Loop to execute extractalign on all files in CMSEARCH
for file in CMSEARCH/*; do
    echo "1-500" | extractalign "$file" PredictedHairpin/"$(basename "$file")" 2>&1
done

#RUN SED COMMANDS WITHOUT REMOVING THE HEADER
sed -i '/^[^>]/ s/-//g' PredictedHairpin/*

#REMOVE>300
#Loop to iterate over the files in the 'PredictedHairpin' directory
for file in PredictedHairpin/*; do
    awk '/^>/ { if (seq != "" && length(seq) <= 301) { print header ORS seq } header = $0; seq = "" } !/^>/ { seq = seq $0 } END { if (length(seq) <= 301) { print header ORS seq } }' "$file" > arquivo_filtrado.fasta
    mv arquivo_filtrado.fasta "$file"
done

#BLASTCOMPARE
mkdir BlastCompare
cp -r PredictedHairpin/* BlastCompare/

#TranscriptionRNADNA
#tr 'U' 'T' 
#tr 'u' 't' 

#!/bin/bash

input_dir="BlastCompare"  # Substitua pelo caminho do diretório contendo os arquivos

for file in "$input_dir"/*; do
    if [ -f "$file" ]; then
        sed -i -e '/^>/!y/U/T/' "$file"
    fi
done

#!/bin/bash

input_dir="BlastCompare"  # Substitua pelo caminho do diretório contendo os arquivos

for file in "$input_dir"/*; do
    if [ -f "$file" ]; then
        sed -i -e '/^>/!y/u/t/' "$file"
    fi
done

#RUN SED COMMANDS WITHOUT REMOVING THE HEADER
#sed -i '/^[^>]/ s/-//g' BlastCompare/*

#BLASTNMATUREALINGMENT
#for file in BlastCompare/*; do
#    filename=$(basename "$file")
#    blastn -query "$file" -db "data/families/$filename" -out "ID/$filename" -evalue 0.01 -word_size 15
#done


#BLASTNMATURETAB
for file in BlastCompare/*; do
    filename=$(basename "$file")
     blastn -query "$file" -db "data/families/$filename" -out "ID/$filename" -evalue 0.01 -outfmt "6 qseqid" -word_size 15
done

#FIND 
find ID -size  0 -print -delete

#ID COM FA ">"
#Loop to iterate over the files in the "ID" directory.
for file in ID/*; do
    sed -i 's/^/>/' "$file"
done


#Loop to iterate over the files in the "PredictedHairpin" directory.
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    grep -x -F -A 1000 -f "ID/$filename" "$file" > "PredictedCurated/$filename"
done

#FIND 
find PredictedCurated -size  0 -print -delete
find AlignmentBlastMature -size  0 -print -delete
find CMSEARCH -size  0 -print -delete

#RedundanceIdenticalNonIdentical
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 100 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "PredictedNonIdentical/$filename" -redundantoutseq "PredictedIdentical/$filename" &
done
wait

#REDUNDANCE70
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile  matrixf] -mode 1 -threshold 70 -minthreshold 30 -maxthreshold 90 -gapopen  10 -gapextend 5 -outseq "NonRedundant70/$filename" -redundantoutseq "Redundant70/$filename" &
done
wait

#REDUNDANCE75
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile  matrixf] -mode 1 -threshold 75 -minthreshold 30 -maxthreshold 90 -gapopen  10 -gapextend 5 -outseq "NonRedundant75/$filename" -redundantoutseq "Redundant75/$filename" &
done
wait

#REDUNDANCE80
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile  matrixf] -mode 1 -threshold 80 -minthreshold 30 -maxthreshold 90 -gapopen  10 -gapextend 5 -outseq "NonRedundant80/$filename" -redundantoutseq "Redundant80/$filename" &
done
wait

#REDUNDANCE85
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile  matrixf] -mode 1 -threshold 85 -minthreshold 30 -maxthreshold 90 -gapopen  10 -gapextend 5 -outseq "NonRedundant85/$filename" -redundantoutseq "Redundant85/$filename" &
done
wait

#REDUNDANCE90
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile  matrixf] -mode 1 -threshold 90 -minthreshold 30 -maxthreshold 90 -gapopen  10 -gapextend 5 -outseq "NonRedundant90/$filename" -redundantoutseq "Redundant90/$filename" &
done
wait

#REDUNDANCE95
for file in PredictedHairpin/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile  matrixf] -mode 1 -threshold 95 -minthreshold 30 -maxthreshold 90 -gapopen  10 -gapextend 5 -outseq "NonRedundant95/$filename" -redundantoutseq "Redundant95/$filename" &
done
wait



#Delete gff
rm -f *.gff


find PredictedNonIdentical -size  0 -print -delete
find PredictedIdentical -size  0 -print -delete
find Redundant70 -size  0 -print -delete
find NonRedundant70 -size  0 -print -delete
find NonRedundant75 -size  0 -print -delete
find Redundant75 -size  0 -print -delete
find NonRedundant80 -size  0 -print -delete
find Redundant80 -size  0 -print -delete
find NonRedundant85 -size  0 -print -delete
find Redundant85 -size  0 -print -delete
find NonRedundant90 -size  0 -print -delete
find Redundant90 -size  0 -print -delete
find NonRedundant95 -size  0 -print -delete
find Redundant95 -size  0 -print -delete

#PredictedCurated
mkdir CuratedNonIdentical
mkdir CuratedIdentical
mkdir CuratedNonRedundant70
mkdir CuratedRedundant70
mkdir CuratedNonRedundant75
mkdir CuratedRedundant75
mkdir CuratedNonRedundant80
mkdir CuratedRedundant80
mkdir CuratedNonRedundant85
mkdir CuratedRedundant85
mkdir CuratedNonRedundant90
mkdir CuratedRedundant90
mkdir CuratedNonRedundant95
mkdir CuratedRedundant95

find PredictedCurated -size  0 -print -delete

#CompareMatureRedundanceIdenticalNonIdentical
for file in PredictedCurated/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 100 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "CuratedNonIdentical/$filename" -redundantoutseq "CuratedIdentical/$filename" &
done
wait

#CompareMatureREDUNDANCE70
for file in PredictedCurated/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 70 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "CuratedNonRedundant70/$filename" -redundantoutseq "CuratedRedundant70/$filename" &
done
wait

#CompareMatureREDUNDANCE75
for file in PredictedCurated/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 75 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "CuratedNonRedundant75/$filename" -redundantoutseq "CuratedRedundant75/$filename" &
done
wait

#CompareMatureREDUNDANCE80
for file in PredictedCurated/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 80 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "CuratedNonRedundant80/$filename" -redundantoutseq "CuratedRedundant80/$filename" &
done
wait

#CompareMatureREDUNDANCE85

for file in PredictedCurated/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 85 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "CuratedNonRedundant85/$filename" -redundantoutseq "CuratedRedundant85/$filename" &
done
wait

#CompareMatureREDUNDANCE90
for file in PredictedCurated/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 90 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "CuratedNonRedundant90/$filename" -redundantoutseq "CuratedRedundant90/$filename" &
done
wait

#CompareMatureREDUNDANCE95
for file in PredictedCurated/*; do
    filename=$(basename "$file")
    skipredundant -feature toggle -sequences "$file" [-datafile matrixf] -mode 1 -threshold 95 -minthreshold 30 -maxthreshold 90 -gapopen 10 -gapextend 5 -outseq "CuratedNonRedundant95/$filename" -redundantoutseq "CuratedRedundant95/$filename" &
done
wait


find CuratedNonIdentical -size  0 -print -delete
find CuratedIdentical -size  0 -print -delete
find CuratedRedundant70 -size  0 -print -delete
find CuratedNonRedundant70 -size  0 -print -delete
find CuratedNonRedundant75 -size  0 -print -delete
find CuratedRedundant75 -size  0 -print -delete
find CuratedNonRedundant80 -size  0 -print -delete
find CuratedRedundant80 -size  0 -print -delete
find CuratedNonRedundant85 -size  0 -print -delete
find CuratedRedundant85 -size  0 -print -delete
find CuratedNonRedundant90 -size  0 -print -delete
find CuratedRedundant90 -size  0 -print -delete
find CuratedNonRedundant95 -size  0 -print -delete
find CuratedRedundant95 -size  0 -print -delete
#deletefiles

#Delete gff
rm -f *.gff

#Deletediretorios
#rm -r CMSEARCH
